use hal::*;
use num_modular::ModularCoreOps;
use rand::Rng;

use super::shaders::params::*;

const nums: [u32; 2048] = [
    8, 159, 24, 145, 75, 75, 186, 39, 84, 215, 209, 0, 240, 118, 115, 40, 9, 223, 4, 9, 105, 36,
    24, 204, 217, 96, 47, 220, 162, 141, 212, 151, 142, 155, 53, 204, 121, 101, 79, 39, 161, 48,
    223, 222, 238, 90, 251, 228, 212, 124, 250, 81, 136, 167, 44, 43, 77, 142, 60, 245, 7, 6, 32,
    138, 202, 241, 211, 22, 67, 25, 148, 169, 235, 131, 175, 19, 77, 224, 222, 38, 255, 48, 16,
    116, 199, 183, 163, 101, 140, 79, 0, 36, 182, 176, 43, 156, 137, 106, 249, 84, 151, 28, 194,
    195, 10, 197, 97, 187, 11, 98, 108, 255, 46, 159, 193, 185, 216, 197, 137, 26, 68, 237, 200,
    249, 43, 212, 223, 43, 230, 48, 148, 165, 22, 188, 161, 22, 33, 105, 168, 61, 14, 137, 164,
    181, 67, 58, 92, 210, 247, 113, 76, 123, 247, 194, 74, 157, 40, 234, 188, 148, 14, 61, 16, 192,
    112, 118, 206, 191, 147, 117, 152, 149, 200, 129, 235, 172, 113, 245, 235, 126, 121, 57, 200,
    133, 31, 218, 205, 219, 175, 184, 166, 107, 45, 169, 87, 189, 109, 25, 38, 137, 232, 87, 190,
    253, 202, 54, 227, 133, 2, 76, 223, 132, 204, 230, 247, 184, 236, 230, 151, 138, 204, 169, 187,
    3, 34, 36, 254, 20, 16, 174, 118, 238, 5, 161, 201, 104, 253, 177, 138, 3, 157, 201, 237, 99,
    72, 146, 188, 72, 169, 144, 95, 42, 242, 31, 143, 3, 33, 231, 111, 82, 13, 100, 104, 250, 97,
    173, 179, 78, 231, 35, 186, 91, 141, 83, 136, 49, 61, 166, 97, 47, 210, 150, 135, 253, 241,
    196, 143, 18, 120, 87, 55, 207, 118, 68, 250, 149, 55, 25, 200, 31, 191, 239, 203, 38, 249, 28,
    181, 156, 147, 147, 81, 40, 134, 37, 18, 42, 255, 77, 161, 246, 91, 107, 15, 173, 122, 119,
    174, 185, 134, 101, 92, 156, 223, 104, 130, 120, 226, 90, 32, 78, 200, 6, 141, 36, 197, 191,
    222, 111, 254, 74, 155, 102, 167, 19, 136, 200, 225, 236, 155, 152, 149, 225, 130, 126, 123,
    196, 185, 72, 217, 82, 78, 135, 146, 182, 157, 44, 203, 110, 99, 210, 97, 165, 238, 90, 124,
    74, 199, 46, 222, 4, 10, 146, 217, 61, 65, 229, 233, 153, 1, 61, 185, 169, 61, 92, 3, 237, 226,
    208, 98, 238, 112, 94, 11, 202, 14, 148, 184, 234, 164, 222, 219, 62, 253, 22, 183, 44, 107,
    73, 206, 63, 39, 73, 124, 9, 103, 47, 179, 226, 147, 156, 37, 167, 231, 165, 227, 12, 252, 8,
    100, 209, 66, 233, 255, 121, 22, 151, 58, 168, 183, 59, 18, 17, 225, 97, 124, 190, 48, 158,
    230, 34, 99, 181, 174, 111, 74, 162, 253, 56, 58, 175, 114, 178, 71, 21, 33, 114, 120, 71, 53,
    207, 87, 41, 132, 78, 135, 219, 188, 54, 228, 99, 171, 32, 213, 178, 21, 242, 204, 73, 8, 177,
    132, 26, 51, 43, 28, 38, 75, 197, 253, 32, 97, 91, 212, 122, 186, 171, 27, 188, 32, 193, 253,
    126, 254, 146, 204, 160, 110, 13, 37, 55, 137, 187, 221, 38, 139, 76, 94, 186, 103, 58, 245,
    198, 238, 20, 17, 218, 110, 14, 47, 171, 246, 101, 4, 129, 111, 145, 81, 80, 167, 210, 175, 82,
    135, 103, 30, 138, 0, 26, 73, 87, 231, 123, 68, 5, 237, 157, 7, 15, 240, 197, 112, 60, 50, 18,
    221, 90, 169, 0, 217, 225, 40, 228, 20, 246, 118, 4, 213, 251, 205, 169, 131, 217, 172, 142,
    250, 123, 207, 187, 25, 190, 77, 202, 241, 195, 5, 86, 88, 78, 101, 4, 221, 97, 162, 87, 254,
    79, 5, 242, 87, 113, 112, 85, 144, 17, 155, 215, 167, 69, 7, 149, 26, 187, 191, 250, 239, 166,
    0, 133, 53, 1, 101, 31, 81, 216, 221, 229, 202, 237, 249, 46, 17, 145, 93, 231, 78, 125, 108,
    216, 25, 158, 34, 154, 32, 242, 108, 131, 225, 0, 33, 1, 59, 151, 206, 53, 125, 86, 76, 174, 2,
    4, 148, 220, 227, 4, 1, 251, 20, 21, 238, 174, 124, 29, 36, 217, 180, 90, 223, 158, 116, 15,
    91, 255, 91, 213, 91, 145, 202, 234, 82, 141, 177, 38, 201, 16, 18, 182, 166, 178, 74, 94, 138,
    156, 248, 242, 207, 236, 16, 20, 249, 22, 24, 114, 11, 197, 165, 253, 148, 46, 242, 190, 139,
    84, 106, 147, 30, 158, 52, 251, 21, 105, 98, 109, 29, 96, 159, 69, 74, 91, 99, 159, 39, 106,
    219, 117, 229, 111, 251, 213, 103, 104, 170, 102, 201, 182, 33, 92, 207, 12, 196, 153, 230, 97,
    137, 200, 180, 52, 9, 22, 150, 15, 198, 67, 193, 36, 246, 168, 126, 168, 191, 234, 232, 147,
    255, 238, 225, 182, 236, 183, 23, 32, 151, 168, 192, 12, 12, 100, 62, 174, 45, 104, 249, 120,
    102, 39, 100, 154, 178, 96, 118, 238, 77, 46, 61, 91, 78, 230, 248, 35, 192, 153, 57, 113, 98,
    53, 11, 73, 197, 102, 66, 198, 56, 84, 220, 221, 98, 234, 214, 60, 66, 242, 197, 206, 144, 239,
    47, 21, 202, 46, 17, 100, 61, 61, 240, 246, 130, 148, 1, 104, 38, 18, 181, 59, 206, 100, 60,
    221, 90, 163, 110, 152, 245, 109, 32, 71, 73, 229, 82, 178, 175, 185, 254, 179, 64, 60, 201,
    118, 6, 67, 101, 126, 112, 147, 153, 216, 244, 8, 55, 162, 0, 57, 244, 150, 5, 219, 155, 220,
    175, 188, 167, 139, 82, 204, 34, 114, 238, 187, 24, 81, 143, 246, 105, 119, 98, 121, 64, 85,
    201, 52, 149, 235, 5, 111, 15, 138, 29, 35, 1, 210, 110, 140, 50, 76, 23, 219, 130, 80, 216,
    94, 180, 148, 156, 156, 95, 143, 146, 210, 126, 157, 38, 14, 36, 82, 237, 187, 102, 43, 160,
    26, 94, 123, 45, 97, 148, 225, 80, 143, 148, 97, 131, 232, 97, 192, 127, 177, 1, 78, 79, 236,
    174, 173, 245, 73, 37, 165, 11, 66, 34, 51, 175, 188, 55, 111, 103, 174, 116, 104, 73, 4, 99,
    187, 25, 235, 30, 137, 105, 220, 16, 21, 23, 203, 136, 109, 67, 32, 97, 154, 243, 36, 213, 247,
    123, 221, 93, 162, 23, 61, 150, 232, 19, 42, 100, 36, 242, 69, 234, 186, 244, 138, 228, 30,
    121, 9, 209, 219, 71, 144, 7, 172, 104, 58, 113, 230, 249, 151, 247, 40, 69, 245, 95, 92, 252,
    97, 18, 140, 251, 241, 158, 128, 38, 148, 179, 58, 40, 208, 118, 195, 93, 63, 230, 218, 128, 0,
    8, 61, 71, 60, 119, 96, 252, 225, 164, 40, 136, 65, 253, 92, 231, 158, 224, 253, 245, 50, 52,
    172, 92, 182, 115, 54, 168, 113, 113, 54, 254, 30, 6, 7, 200, 109, 207, 192, 226, 88, 166, 26,
    2, 88, 107, 181, 193, 207, 45, 68, 99, 92, 86, 0, 146, 150, 165, 88, 152, 58, 74, 200, 229,
    181, 116, 83, 140, 153, 216, 205, 165, 120, 133, 169, 27, 80, 130, 43, 145, 14, 63, 185, 227,
    80, 103, 21, 93, 47, 214, 22, 198, 170, 151, 71, 3, 9, 6, 35, 73, 175, 39, 244, 233, 107, 72,
    84, 212, 69, 165, 244, 80, 185, 226, 141, 68, 138, 115, 52, 75, 45, 244, 244, 196, 118, 107,
    58, 29, 138, 153, 23, 185, 166, 177, 18, 45, 3, 12, 125, 13, 209, 238, 19, 36, 27, 185, 59,
    226, 23, 111, 157, 79, 197, 118, 97, 242, 244, 144, 32, 36, 55, 127, 197, 155, 167, 235, 11,
    138, 69, 110, 54, 167, 167, 86, 109, 43, 206, 60, 197, 45, 82, 166, 134, 175, 138, 131, 204,
    90, 176, 95, 101, 149, 137, 253, 188, 80, 129, 149, 182, 204, 166, 100, 70, 43, 207, 176, 212,
    42, 144, 226, 185, 159, 170, 228, 6, 132, 175, 216, 160, 68, 85, 247, 20, 136, 5, 104, 60, 86,
    130, 112, 241, 69, 254, 84, 146, 26, 97, 59, 232, 171, 138, 68, 57, 8, 173, 143, 213, 42, 150,
    243, 122, 48, 237, 33, 113, 253, 161, 229, 160, 81, 230, 73, 10, 71, 121, 147, 28, 31, 134, 34,
    241, 191, 88, 51, 103, 111, 233, 61, 84, 52, 190, 159, 97, 254, 62, 140, 162, 10, 58, 57, 50,
    113, 126, 227, 187, 110, 229, 15, 171, 8, 128, 193, 104, 122, 3, 187, 3, 172, 99, 135, 243, 2,
    113, 94, 24, 119, 239, 112, 156, 231, 199, 253, 49, 49, 154, 87, 96, 243, 79, 203, 248, 107,
    75, 201, 33, 18, 192, 10, 15, 224, 54, 163, 32, 8, 21, 45, 47, 100, 251, 55, 30, 80, 134, 13,
    30, 54, 226, 239, 14, 139, 77, 194, 141, 196, 139, 115, 231, 80, 242, 40, 168, 18, 247, 133,
    41, 178, 58, 54, 28, 141, 86, 218, 229, 224, 45, 42, 141, 228, 86, 98, 125, 10, 29, 223, 227,
    192, 25, 53, 204, 172, 15, 181, 172, 31, 96, 146, 25, 144, 182, 222, 179, 223, 79, 101, 136,
    154, 83, 0, 116, 193, 77, 20, 138, 19, 43, 98, 92, 162, 231, 179, 210, 132, 55, 28, 134, 255,
    28, 189, 227, 185, 123, 168, 27, 144, 252, 116, 167, 3, 120, 137, 80, 129, 90, 106, 146, 5, 6,
    196, 77, 118, 1, 159, 45, 110, 118, 12, 24, 171, 108, 251, 244, 251, 121, 208, 47, 99, 105,
    167, 213, 169, 244, 246, 146, 135, 49, 80, 75, 155, 93, 217, 83, 115, 77, 51, 244, 136, 42,
    195, 197, 228, 130, 111, 83, 66, 1, 95, 36, 14, 77, 19, 200, 150, 59, 26, 171, 124, 229, 217,
    254, 169, 24, 40, 80, 241, 97, 171, 117, 182, 56, 63, 233, 170, 6, 31, 237, 52, 66, 248, 2,
    162, 157, 179, 145, 133, 134, 186, 90, 25, 13, 15, 0, 142, 56, 32, 156, 186, 43, 1, 246, 100,
    76, 189, 28, 129, 106, 171, 59, 242, 180, 83, 29, 214, 88, 99, 18, 244, 114, 26, 63, 79, 12,
    147, 230, 44, 30, 108, 115, 70, 29, 119, 33, 131, 131, 240, 49, 99, 38, 82, 161, 63, 254, 137,
    46, 140, 16, 85, 250, 236, 95, 38, 240, 196, 66, 170, 158, 86, 58, 49, 8, 130, 188, 13, 94,
    213, 11, 123, 188, 45, 246, 149, 135, 86, 100, 237, 9, 165, 88, 38, 106, 67, 97, 196, 245, 241,
    79, 87, 20, 60, 215, 77, 103, 207, 226, 233, 226, 21, 178, 169, 41, 14, 23, 107, 55, 158, 60,
    42, 31, 146, 203, 225, 188, 22, 67, 31, 47, 246, 164, 110, 154, 47, 9, 200, 26, 85, 65, 118,
    65, 151, 201, 51, 12, 27, 55, 67, 185, 4, 158, 105, 33, 241, 88, 227, 137, 205, 209, 89, 66,
    58, 26, 151, 43, 211, 249, 8, 184, 118, 177, 70, 213, 35, 32, 75, 223, 3, 21, 99, 82, 169, 68,
    216, 174, 4, 197, 116, 184, 245, 10, 115, 126, 200, 131, 137, 249, 232, 33, 217, 118, 144, 167,
    110, 252, 36, 232, 120, 127, 70, 205, 127, 47, 125, 5, 37, 74, 243, 25, 86, 211, 190, 35, 58,
    231, 44, 153, 184, 210, 251, 222, 47, 96, 82, 207, 52, 74, 3, 65, 175, 240, 40, 57, 67, 224,
    26, 199, 170, 17, 62, 144, 150, 113, 178, 60, 127, 51, 130, 45, 27, 131, 62, 58, 11, 160, 155,
    227, 202, 65, 24, 13, 116, 250, 80, 218, 172, 164, 126, 91, 52, 54, 191, 245, 52, 54, 28, 148,
    181, 12, 131, 132, 9, 47, 249, 90, 75, 249, 37, 37, 106, 22, 227, 189, 189, 211, 39, 218, 4,
    22, 119, 100, 246, 112, 36, 23, 54, 176, 245, 117, 55, 101, 9, 171, 46, 11, 247, 14, 199, 197,
    166, 130, 224, 16, 66, 251, 133, 148, 141, 234, 251, 79, 243, 243, 90, 66, 30, 187, 169, 147,
    46, 201, 31, 47, 215, 20, 16, 76, 216, 109, 41, 198, 133, 123, 203, 97, 60, 13, 245, 147, 162,
    44,
];

pub fn go() {
    let mut infos = GPU::current_gpus();
    let info = infos.remove(0);
    let gpu = GPU::new(info);
    let queue = gpu.new_queue("queue".into(), 4);

    let shaders_url_str = "file:///Users/josephjohnston/saga/zpu/src/shaders/";
    let archive = gpu.new_archive("rolled_macos".into(), false, shaders_url_str);
    // let archive = gpu.load_archive("risc0".into(), shaders_url_str);
    let pipeline = archive.load_pipeline("go".into()).unwrap();
    drop(archive);

    // const EPSILON: u32 = (1 << 24) - (1 << 16) + (1 << 8) - (1 << 0);
    // const P: u32 = ((1 << 32) - EPSILON as u64) as u32;
    let block_size = Size::new(T * W, 1, 1);
    let grid_size = Size::new(B, 1, 1);
    let mut rng = rand::thread_rng();
    let mut input = gpu.new_buffer::<u8>("input".into(), V * W * B * D, true);
    for (i, x) in input.as_mut_slice().iter_mut().enumerate() {
        *x = rng.gen::<u8>();
        // *x = nums[i] as u8;
    }
    let output = gpu.new_buffer::<u32>("output".into(), V * W * B * D, true);

    let mut timestamp_sampler = gpu.new_timestamp_sampler(5, false);
    let batch = queue.new_batch(false);

    let cpass = batch.new_compute_pass(Some(&mut timestamp_sampler));
    cpass.set_buffer(0, &input, 0);
    cpass.set_threadgroup_memory_length(1 << 20, 0);
    cpass.set_buffer(1, &output, 0);
    cpass.set_bytes(
        2,
        (&V as *const usize).cast(),
        1 * std::mem::size_of::<u32>(),
    );
    cpass.set_bytes(
        3,
        (&W as *const usize).cast(),
        1 * std::mem::size_of::<u16>(),
    );
    cpass.set_bytes(
        4,
        (&B as *const usize).cast(),
        1 * std::mem::size_of::<u16>(),
    );
    // cpass.set_imageblock_size(1 << 5, 1);
    cpass.set_pipeline(&pipeline);
    cpass.dispatch(block_size, grid_size);
    cpass.end_encoding();

    println!("going!");
    batch.commit();
    batch.wait_until_completed();

    timestamp_sampler.get_timestamps();
    println!("results:");
    for (i, x) in output.as_slice().iter().enumerate() {
        if i < 2 * (V * W * B * D) {
            if i % (1 << 6) == 0 {
                println!("{i}: {x}");
            }
        }
    }
}

// for (ushort k = 0; k < ushort(log2(half(S))); k++)
// {
//     for (ushort i = 0; i < (1 << k); i++)
//     {
//         for (uint s = 0; s < S / (1 << (k + 1)); s++)
//         {
//             uint hi_index = (2 * i + 1) * (S / (1 << (k + 1))) + s;
//             uint mult = array[hi_index] * (1 << 20);
//             uint lo_index = (2 * i) * (S / (1 << (k + 1))) + s;
//             array[hi_index] = array[lo_index] - mult;
//             array[lo_index] = array[lo_index] + mult;
//         }
//     }
// }

// fn zeta(k: u32, index: u32) -> u32 {
//     let prims_1 = [(1 << 20), (1 << 30).mulm(1 << 30, &P)];
//     let prims_2 = [
//         1 << 10,
//         (1 << 30).mulm(1 << 20, &P),
//         1 << 30,
//         (1 << 30).mulm(1 << 30, &P).mulm(1 << 10, &P),
//     ];
//     let prims_3 = [
//         // 5, 45 => 10
//         1 << 5,
//         (1 << 30).mulm(1 << 15, &P),
//         // 25, 65 => 50
//         1 << 25,
//         (1 << 30).mulm(1 << 30, &P).mulm(1 << 5, &P),
//         // 15, 55 => 30
//         1 << 15,
//         (1 << 30).mulm(1 << 25, &P),
//         // 35, 75 => 79
//         (1 << 30).mulm(1 << 30, &P).mulm(1 << 15, &P),
//         (1 << 30).mulm(1 << 5, &P),
//     ];
//     let prims_4 = [
//         // 3743342369, 16707839, 134217856, // 2
//         // 4274061061, 534650848, 16716031, 4144037761, 4274061053,
//         // // 17
//         // 134217856, 4144037505, 4144037761, 134217600, 3743604513, 534650848, 3743342369,
//         // 534912992, 4274061053, 4194308, 4274061061, 4194300, 16716031, 4261539330, 16707839,
//         // 4261547522,
//         // new
//         16707839, 4261547522, 4261539330, 16716031, 4274061053, 4194308, 4274061061, 4194300,
//         534650848, 3743604513, 534912992, 3743342369, 4144037761, 134217600, 4144037505,
//         134217856,
//         //
//         // 4261547522, 16707839, 16716031, 4261539330, 4194308, 4274061053, 4194300, 4274061061,
//         // 3743604513, 534650848, 3743342369, 534912992, 134217600, 4144037761, 134217856,
//         // 4144037505,
//     ];
//     let prims_5 = [
//         364914777, 3913340584, 2274230434, 2004024927, 1464515241, 2813740120, 1441048032,
//         2837207329, 3120762142, 1157493219, 45032751, 4233222610, 196321259, 4081934102, 947271947,
//         3330983414, 4184386525, 93868836, 3065742370, 1212512991, 919248094, 3359007267,
//         2278185239, 2000070122, 171586511, 4106668850, 531848519, 3746406842, 1274452609,
//         3003802752, 3982137898, 296117463,
//     ];
//     if k == 1 {
//         prims_1[index as usize]
//     } else if k == 2 {
//         prims_2[index as usize]
//     } else if k == 3 {
//         prims_3[index as usize]
//     } else if k == 4 {
//         prims_4[index as usize]
//     } else if k == 5 {
//         prims_5[index as usize]
//     } else {
//         0
//     }
// }

// let numsA: [i32; 32] = [
//     -10, -4, 2, -23, -33, 38, 55, 38, 28, -64, -47, -44, 19, -36, 46, -47, 30, -28, -32, -61,
//     22, 29, -44, 21, 30, 62, 30, 58, 6, -64, 36, 18,
// ];
// let numsB: [i32; 32] = [
//     55, -63, -16, 1, 7, 19, 24, -9, -47, -1, -37, 28, -9, 57, -46, -41, 2, 15, -44, -49, -34,
//     16, -16, 13, 61, -2, -39, -8, 55, 42, -56, -33,
// ];
// let numsC: [i32; 32] = [
//     -23, 14, -30, -59, 21, 51, 29, -25, -29, -50, 35, 1, 62, -43, 42, -35, 26, 47, 41, -56,
//     -58, -4, -49, -18, -31, -13, -4, -41, 58, 45, -62, -4,
// ];
// let numsD: [i32; 32] = [
//     8, 10, -59, 38, 10, 13, 24, -7, -52, 28, 32, 50, -64, 33, 10, -55, 14, 42, -10, 47, -33,
//     -56, -42, 22, 54, -12, -19, 11, -28, -25, 16, 36,
// ];

// if i < 32 {
//     *x = numsA[i];
// } else if 32 <= i && i < 64 {
//     *x = numsB[i - 32];
// } else if 64 <= i && i < 96 {
//     *x = numsC[i - 64];
// } else if 96 <= i && i < 128 {
//     *x = numsD[i - 96];
// }

// compute correctly
// println!("calculating CPU version");
// let mut out = vec![0; D * G];
// for g in 0..G {
//     for t in 0..T {
//         let mut array: [u32; S] = [0; S];
//         // READING INPUT
//         for s in 0..S {
//             array[s] = input.as_slice()[g * D + s * (D / S) + t] as u32;
//         }
//         // DECOMPOSING WITHIN THREADS
//         for k in 0..((S as f32).log2() as u32) {
//             for i in 0..(1 << k) {
//                 for s in 0..S / (1 << (k + 1)) {
//                     for u in 0..U {
//                         let hi_index =
//                             ((2 * i + 1) * (S / (1 << (k + 1))) * U + s * U + u) as usize;
//                         // let mult = vals[hi_index].mulm(zeta(k + 1, 2 * i), &P);
//                         let mult = array[hi_index] * (1 << 20);
//                         let lo_index =
//                             ((2 * i) * (S / (1 << (k + 1))) * U + s * U + u) as usize;
//                         // array[hi_index] = array[lo_index].subm(mult, &P);
//                         // array[lo_index] = array[lo_index].addm(mult, &P);
//                         array[hi_index] = array[lo_index] - mult;
//                         array[lo_index] = array[lo_index] + mult;
//                         // let hi_index = (2 * i + 1) * (S / (1 << (k + 1))) + s;
//                         // let lo_index = (2 * i) * (S / (1 << (k + 1))) + s;
//                         // let mult = vals[hi_index] * (1 << 20);
//                         // vals[hi_index] = vals[lo_index] + mult;
//                         // vals[lo_index] = vals[lo_index] - mult;
//                     }
//                 }
//             }
//         }
//         // DECOMPOSING ACROSS THREADS
//         for l in 0..((T as f32).log2() as u32) {
//             for t in 0..T / (1 << l + 1) {
//                 for r in 0..(1 << l) {
//                     let lo_index = (2 * r) * T / (1 << l + 1) + t;
//                     let hi_index = (2 * r + 1) * T / (1 << l + 1) + t;
//                     // println!("threads: {lo_index}, {hi_index}");
//                     // let idx = Self::logT() - l - 1;
//                     // let mask = 1 << idx;
//                     // let sigma = tau ^ mask;
//                     for s in 0..S {
//                         let i = s * (1 << l) + r;
//                         let zeta = 1 << 20; //Self::zeta(Self::logS() + l + 2, 2 * i);
//                         for u in 0..U {
//                             let lo_coef = array[(lo_index * S * U + s * U + u) as usize];
//                             let hi_coef = array[(hi_index * S * U + s * U + u) as usize];
//                             let mult = hi_coef * zeta;
//                             array[(hi_index * S * U + s * U + u) as usize] =
//                                 lo_coef - mult;
//                             array[(lo_index * S * U + s * U + u) as usize] =
//                                 lo_coef + mult;
//                         }
//                     }
//                 }
//             }
//         }
//         // WRITING OUTPUT
//         for s in 0..S {
//             out[g * D + s * (D / S) + t] = vals[s];
//         }
//     }
// }
// // compute expected output
// println!("calculating correct");
// let mut correct = vec![0; D * G];
// for g in 0..G {
//     for j in 0..D {
//         correct[g * D + j] = input.as_slice()[g * D + j] as u32;
//     }
//     for k in 0..((S as f32).log2() as u32) {
//         for j in 0..(1 << k) {
//             for l in 0..D / (1 << (k + 1)) {
//                 let hi_index = g * D + j * (D / (1 << k)) + D / (1 << (k + 1)) + l;
//                 let lo_index = g * D + j * (D / (1 << k)) + l;
//                 // let mult = ref_in[hi_index].mulm(1 << 20, &P);
//                 // ref_out[hi_index] = ref_in[lo_index].addm(mult, &P);
//                 // ref_out[lo_index] = ref_in[lo_index].subm(mult, &P);
//                 let mult = correct[hi_index] * (1 << 20);
//                 correct[hi_index] = correct[lo_index] + mult;
//                 correct[lo_index] = correct[lo_index] - mult;
//                 // println!("hi: {}, lo: {}", correct[hi_index], correct[lo_index]);
//                 // println!(
//                 //     "hi_val: {}, lo_val: {}, mult: {}, lo: {}",
//                 //     ref_in[hi_index], ref_in[lo_index], mult, ref_out[lo_index]
//                 // )
//             }
//         }
//     }
// }
// // outputs
// println!("comparing outputs");
// for g in 0..G {
//     for j in 0..D {
//         println!("{}: {}", g * D + j, output[g * D + j],);
//         // println!("C: {}: {}", g * G + j, correct[g * G + j]);
//         // assert_eq!(correct[g * D + j], out[g * D + j]);
//         // assert_eq!(output.as_slice()[g * D + j], out[g * D + j]);
//     }
// }
